<?php

namespace App\Controller;

use App\Entity\LogBookUpload;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Uploader controller.
 *
 * @Route("upload")
 */
class LogBookUploaderController extends Controller
{
    /**
     * @Route("/", name="upload_index")
     * @Method("GET")
     */
    public function index()
    {
        //$em = $this->getDoctrine()->getManager();

        //$verdicts = $em->getRepository('App:LogBookUpload')->findAll();

        return $this->render('lbook/upload/index.html.twig', array(
            //'verdicts' => $verdicts,
        ));
        // replace this line with your own code!
        //return $this->render('@Maker/demoPage.html.twig', [ 'path' => str_replace($this->getParameter('kernel.project_dir').'/', '', __FILE__) ]);
    }

    /**
     * Creates a new verdict entity.
     *
     * @Route("/new", name="upload_new")
     * @Method({"GET", "POST"})
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function newAction(Request $request)
    {
        $obj = new LogBookUpload();
        //$form = $this->createForm(LogBookUpload::class, $obj);
        $form = $this->createForm('App\Form\LogBookUploadType', $obj);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $obj->getLogFile();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // moves the file to the directory where brochures are stored
//            $file->move(
//                $this->getParameter('brochures_directory'),
//                $fileName
//            );
            $obj->addMessage("New file name is " . $fileName);
            $obj->addMessage("File ext "  .$file->guessExtension());
            $copy_info = $file->move("../uploads/", $fileName);
            $obj->addMessage("File copy info "  . $copy_info);
            //$file->move("uploads/", $fileName);

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $obj->setLogFile($fileName);
//
//            $em = $this->getDoctrine()->getManager();
//            $em->persist($obj);
//            $em->flush();


            return $this->showAction($obj);
            //return $this->redirectToRoute('upload_show', array('id' => $obj->getId()));
        }

        return $this->render('lbook/verdict/new.html.twig', array(
            'verdict' => $obj,
            'form' => $form->createView(),
        ));
    }


//    /**
//     * Show upload file info.
//     *
//     * @Route("/{id}", name="upload_show")
//     * @Method("GET")
//     * @param LogBookUpload $obj
//     * @return \Symfony\Component\HttpFoundation\Response
//     */
    public function showAction(LogBookUpload $obj)
    {
        return $this->render('lbook/upload/show.html.twig', array(
            'upload' => $obj,
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
