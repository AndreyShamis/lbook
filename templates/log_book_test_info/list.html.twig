    <input type="button" id="btnSuiteVerdict" value="(Suite, Verdict)" />
    <input type="button" id="btnHostsVerdict" value="(Host, Verdict)" />
    <input type="button" id="btnvs" value="SYS_VAL" />
<div id="testsPivotTableOutput"></div>
{% set table_data_attributes = {
    'classes': 'table table-no-bordered',
    'pagination': 'true',
    'search': 'true',
    'toggle': 'table',
    'toolbar': '#testsTableToolbar',
    'show-refresh': 'true',
    'key-events': 'true',
    'show-export': 'true',
    'show-columns': 'true',
    'advanced-search': 'true',
    'cookie': 'true',
    'cookie-cookies-enabled': "['bs.table.columns']",
    'cookie-id-table': 'testInfoTestList',
    'page-size': '50000',
    'page-list': "[5, 10, 20, 50, 100, 500, 1000, 2000, 5000, 10000, 50000]",
    'sort-order': 'desc'
} %}
{% apply spaceless %}

<table class="records_list table table-striped table-condensed table-hover"
    id="testsTable"
    {% for attr, value in table_data_attributes %}
        data-{{ attr }}="{{ value }}"
    {% endfor %}>
    <thead>
        <tr>
            <th data-sortable="true">ID</th>
            <th data-sortable="true">Name</th>
            <th data-sortable="true">Suite</th>
            <th data-sortable="true">Cycle</th>
            <th data-sortable="true">ProdVer</th>   
            <th data-sortable="true">Branch</th>                
            <th data-sortable="true" title="Chip">Chip</th>
            <th data-sortable="true" title="Platform">Platform</th>
            <th data-sortable="true" title="Testing Level">TestL</th>
            <th data-sortable="true" title="Build Type">BT</th>
            <th data-sortable="true" title="Component">Component</th>
            <th data-sortable="true">Setup</th>
            <th data-sortable="true">Host</th>
            <th data-sortable="true" data-visible="false">Order</th>
            <th data-sortable="true" data-visible="false">Owner</th>
            <th data-sortable="true">Runtime</th>
            <th data-sortable="true">Start</th>
            <th data-sortable="true" data-visible="false">End</th>
            <th data-sortable="true" data-visible="false" title="Runtime % in cycle">%</th>
            <th data-sortable="true">Verdict</th>
            <th data-sortable="true">FailReason</th>
            <th data-sortable="true">Rate</th>
            {% set uniqueKeys = uniqueKeys is defined ? uniqueKeys : [] %}

            {% for key in uniqueKeys %}
                <th data-sortable="true">{{ key }}</th>
            {% endfor %}
        </tr>
    </thead>
    <tbody>
        {% for log_book_test in all_tests | slice(0, 50000) %}
            <tr>
                <td>
                    <a title="{{ log_book_test.testType | default('TEST') }} - {{ log_book_test.testInfo.path | default('') }}" 
                    href="{{ path('test_show_first', {'id': log_book_test.id}) }}">
                        {{ log_book_test.id }}
                    </a>
                </td>
                <td>{{ log_book_test.name ? log_book_test.name : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.name : '' }}</td>
                <td>
                    <a href="{{ path('cycle_show_first', { 'id': log_book_test.cycle.id }) }}">
                        {{ shortString(log_book_test.cycle.name, 80)}}
                    </a>
                </td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.productVersion : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.branchName : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.chip : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.platform : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.testingLevel : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.buildType : '' }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.components|arrayToString(', ') : '' }}</td>
                
                <td>{{ log_book_test.setup.name }}</td>
                <td>{{ log_book_test.suiteExecution ? log_book_test.suiteExecution.host.name : '' }}</td>
                <td>{{ log_book_test.executionOrder }}</td>
                <td>{{ log_book_test.suiteExecution and log_book_test.suiteExecution.owners and log_book_test.suiteExecution.owners | length >= 1 ? log_book_test.suiteExecution.owners| first : '' }}</td>
                <td>
                    <span data-title="{{ log_book_test.timeRun }}">
                        {{ log_book_test.timeRun | ExecutionTimeGeneric }}
                    </span>
                </td>
                <td>
                    {% if log_book_test.timeStart %}
                        <span data-title="{{ log_book_test.timeStart | date('ymdHis') }}">
                            {{ log_book_test.timeStart | date('m-d H:i:s') }}
                        </span>
                    {% endif %}
                </td>
                <td>
                    {% if log_book_test.timeEnd %}
                        <span data-title="{{ log_book_test.timeEnd | date('ymdHis') }}">
                            {{ log_book_test.timeEnd | date('H:i:s') }}
                        </span>
                    {% endif %}
                </td>
                <td>
                    <span data-title="{{ log_book_test.timeRun }}"></span>
                    {{ getPercentage(log_book_test.timeRun, log_book_test.cycle.testsTimeSum) }}%
                </td>
                <td>
                    <span class="badge {{ verdictToBadge(log_book_test.verdict) }}">
                        {{ log_book_test.verdict }}
                    </span>
                </td>
                <td>{{ log_book_test.failDesc }}</td>
                <td>{% if log_book_test.verdict == "PASS" %}1.0{%endif%}{% if log_book_test.verdict == "FAIL" %}0.0{%endif%}{% if log_book_test.verdict == "ERROR" %}0.1{%endif%}</td>
                
                {% for key in uniqueKeys %}
                    {% set metaData = log_book_test.newMetaData %}
                    {% set value = metaData ? metaData.value[key] ?? '-' : '-' %}
                    <td title="{{key}}">{{ value }}</td>
                {% endfor %}
            </tr>
        {% else %}
            <tr>
                <td colspan="12">No records found</td>
            </tr>
        {% endfor %}
    </tbody>
</table>

{% endapply %}
            <script type="text/javascript">
            $(function(){
                function buildPivotTableForTests() {
                    $(function(){
                        $("#testsPivotTableOutput").pivotUI($("#testsTable"),
                            {
                                renderers: $.extend(
                                    $.pivotUtilities.renderers,
                                    // $.pivotUtilities.c3_renderers,
                                    // $.pivotUtilities.d3_renderers,
                                    $.pivotUtilities.plotly_renderers,
                                    $.pivotUtilities.export_renderers,
                                    $.pivotUtilities.gchart_renderers,
                                    // $.pivotUtilities.derivers
                                ),

                                cols: ["Verdict"],
                                rows: ["Suite"],
                                vals: ["PassRate"],
                                aggregatorName: ["Count"],
                                // aggregators: {
                                //     "PassRate": function() { return tpl.average()(["PassRate"])}
                                // },
                            });
                    });
                    //window.scrollTo(0,document.body.scrollHeight);
                    //window.scrollTo(0, 0);
                    document.getElementById("testsPivotTableOutput").scrollIntoView();
                }
                            
                function buildPivotTableHosts() {
                    $(function(){
                        $("#testsPivotTableOutput").pivotUI($("#testsTable"),{
                                renderers: $.extend(
                                    $.pivotUtilities.renderers, $.pivotUtilities.plotly_renderers, $.pivotUtilities.export_renderers, $.pivotUtilities.gchart_renderers,
                                ),
                                cols: ["Verdict"],
                                rows: ["Host"],
                                vals: ["PassRate"],
                                aggregatorName: ["Count"],
                            });
                    });
                    document.getElementById("testsPivotTableOutput").scrollIntoView();
                }

                function buildPV_SysVal() {
                    $(function(){
                        $("#testsPivotTableOutput").pivotUI($("#testsTable"),{
                                renderers: $.extend(
                                    $.pivotUtilities.renderers, $.pivotUtilities.plotly_renderers, $.pivotUtilities.export_renderers, $.pivotUtilities.gchart_renderers,
                                ),
                                cols: ["Chip", "Platform", "ProdVer",  "BRAIN", "BOARD", "PROJECT", "FARM_BOARD"],
                                rows: ["Name"],
                                vals: ["Rate"],
                                aggregatorName: ["Average"],
                            });
                    });
                    document.getElementById("testsPivotTableOutput").scrollIntoView();
                }
                $( "#btnSuiteVerdict" ).bind( "click", buildPivotTableForTests);
                $( "#btnHostsVerdict" ).bind( "click", buildPivotTableHosts);
                $( "#btnvs" ).bind( "click", buildPV_SysVal);
            });

    </script>