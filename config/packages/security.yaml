security:
    encoders:
        App\Entity\LogBookUser: auto
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        our_db_provider:
            entity:
                class: App\Entity\LogBookUser
                #property: username
        # https://symfony.com/doc/current/security/ldap.html
        my_ldap_provider:
            ldap:
                service:            Symfony\Component\Ldap\Ldap
                base_dn:            dc=com
                search_dn:          ~
                search_password:    ~
                default_roles:      'ROLE_USER'
                uid_key:            'sAMAccountName'
                filter:             '({uid_key}={username})'
        in_memory: { memory: ~ }


    firewalls:
        login:
            pattern:  ^/login$
            security: false
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|images|assets|js)/
            security: false
        main:
            #pattern:    ^/
            #http_basic: ~
            anonymous: ~
            logout:
                path:                 /logout
                target:               /
                success_handler:      ~
                invalidate_session:   true
                delete_cookies:
                    name:
                        path:                 null
                        domain:               null
                handlers:             []
            form_login:
                use_referer: true
                login_path: login
                #check_path: login
                #default_target_path: home_index
                #always_use_default_target_path: true

            provider: our_db_provider
            # https://symfony.com/doc/current/security/ldap.html
#            form_login_ldap:
#                service: Symfony\Component\Ldap\Ldap
#                dn_string: 'uid={username},dc=example,dc=com'
#                query_string: '(&(uid={username})(memberOf=cn=users,ou=Services,dc=example,dc=com))'
#                provider: my_ldap_provider
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
    role_hierarchy:
        ROLE_REPORT_CREATOR:       [ROLE_USER]
        ROLE_FILTER_CREATOR:       [ROLE_USER]
        ROLE_ADMIN:       [ROLE_USER, ROLE_EVENT_CREATE, ROLE_FILTER_CREATOR]
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_FILTER_CREATOR]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: "%http_protocol%" }
        - { path: ^/register$, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: "%http_protocol%"  }
        - { path: ^/upload(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/cycle/te/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/bot/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/build/clean_not_used, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/update/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/suites/close/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/suites/calculate/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/suites/cycle/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/filters/(.*)edit$, role: ROLE_FILTER_CREATOR }
        - { path: ^/filters/new$, role: ROLE_FILTER_CREATOR }
        - { path: ^/filters/(\d*), role: IS_AUTHENTICATED_FULLY }
        - { path: ^/eventcmu(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/migration(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/reports/auto/create(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/filters_apply/new_cli(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/setup/api/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/cycle/api/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/cycle/searchjson(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/cycle/multiexport(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/cycle/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/api/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/(.*)/showlog, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/(.*)/downloadlog, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/test/export/(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/failure/maintain(.*), role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: IS_AUTHENTICATED_FULLY }
#        - { path: ^/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

